---
# Вкл/Выкл использование downloader сервера (актуально если на удаленном хосте нет доступа к сети интернет или же количество хостов на которые необходимо доставить архив больше 1го)
use_downloader: true
# При использовании downloader в данную папку будет осуществлятся скачивание архива, в дальнейшем распространение архива на удаленные хосты осуществляется из данной папки downloader сервера.
downloader_source_folder: ~/DISTR
# Папка в которую будет осуществлена загрузка установочного архива
distribution_path: "/opt/DISTR"

### Nomad versions ###
# Устанавливаемая версия Nomad
nomad_version: v0.12.5
# Distributives
nomad:
  # Список версий с параметрами (контрольная сумма архива,контрольная сумма бинарного файла, пряма ссылка в сети интернет)
  v0.10.5:
    # Прямая ссылка в сети интернет для возможноти скачать архив с nomad
    source_url: https://releases.hashicorp.com/nomad/0.10.5/nomad_0.10.5_linux_amd64.zip
    # Контрольная сумма скачаемого архива
    checksum_algorithm: "sha256"
    checksum: 970eae241a1fec77002baccfa768bab4b7b4a352000b9615d4246498cd830838
    binary_checksum: dbed4f351a5aa914c2d2a143858e5a5115e23532186e373cb51f932817e30da6
  v0.12.5:
    # Прямая ссылка в сети интернет для возможноти скачать архив с nomad
    source_url: https://releases.hashicorp.com/nomad/0.12.5/nomad_0.12.5_linux_amd64.zip
    # Контрольная сумма скачаемого архива
    checksum_algorithm: "sha256"
    checksum: dece264c86a5898a18d62d6ecca469fee71329e444b284416c57bd1e3d76f253
    binary_checksum: f51b06f7ff820d1c1e07edb95b931dec6b5d9a1c03aea08a7a2555d2399fd898

### System user and group
# Параметры создания пользователя
nomad_manage_user: false
nomad_manage_group: false
nomad_user: root
nomad_group: root
nomad_system: true
nomad_shell: /bin/false
nomad_ssh_key: false

# Конфигурационные параметры сервиса
## Параметры запуска сервиса
nomad_state: started
nomad_enabled: true

## Nomad client role
nomad_node_role: both
#nomad_node_role: server
#nomad_node_role: client

### Servers
nomad_group_name: "nomad"

# TODO add port
# Specifies an array of addresses to the Nomad servers this client should join. 
# This list is used to register the client with the server nodes and advertise the available resources so that the agent can receive work.
# This may be specified as an IP address or DNS, with or without the port.
# If the port is omitted, the default port of 4647 is used.
nomad_servers: "\
  {% set _nomad_master_nodes = [] %}\
  {% for host in groups[nomad_group_name] %}\
    {% set _nomad_node_role = hostvars[host]['nomad_node_role'] | default('client') %}\
    {% if ( _nomad_node_role == 'server' or _nomad_node_role == 'both') %}\
      {{ _nomad_master_nodes.append(hostvars[host].advertise_ip | default(hostvars[host].ansible_default_ipv4.address)) }}\
    {% endif %}\
  {% endfor %}\
  {{ _nomad_master_nodes }}"

### General Parameters

## Directories ##
# Specifies a local directory used to store agent config files.
# This must be specified as an absolute path.
nomad_conf_dir: "/etc/nomad.d"
# Specifies a local directory used to store agent state. 
# Client nodes use this directory by default to store temporary allocation data as well as cluster information. 
# Server nodes use this directory to store cluster state, including the replicated log and snapshot data. 
# This must be specified as an absolute path.
nomad_data_dir: "/DATA/nomad"
# Specifies the directory to use for looking up plugins. 
# By default, this is the top-level data_dir suffixed with "plugins", like "/opt/nomad/plugins". 
# This must be an absolute path.
nomad_plugin_dir: "{{ nomad_data_dir }}/plugins"
# Specifies a local directory used to store agent binary file.
# This must be specified as an absolute path.
nomad_bin_dir: "/opt/nomad/{{ nomad_version }}"


## Name, region, datacenter ##
# Specifies the name of the local node. 
# This value is used to identify individual agents. 
# When specified on a server, the name must be unique within the region.
nomad_node_name: "{{ inventory_hostname_short }}"
# Specifies the region the Nomad agent is a member of. 
# A region typically maps to a geographic region, for example us, with potentially multiple zones, which map to datacenters such as us-west and us-east.
nomad_region: "global"
# Specifies the data center of the local agent. 
# All members of a datacenter should share a local LAN connection.
nomad_datacenter: "dc1"


## Addresses ##
# Specifies which address the Nomad agent should bind to for network services, including the HTTP interface as well as the internal gossip protocol and RPC mechanism. 
# This should be specified in IP format, and can be used to easily bind all network services to the same address. 
# It is also possible to bind the individual services to different addresses using the addresses configuration option. 
# Dev mode (-dev) defaults to localhost. 
# The value supports go-sockaddr/template format.
nomad_bind_address: "0.0.0.0"
# Specifies the advertise address for individual network services. 
# This can be used to advertise a different address to the peers of a server or a client node to support more complex network configurations such as NAT. 
# This configuration is optional, and defaults to the bind address of the specific network service if it is not provided.
# Any values configured in this stanza take precedence over the default bind_addr.
nomad_advertise_address: "{{ advertise_ip | default(ansible_default_ipv4.address) }}"


## Ports ##
# The address the HTTP server is bound to. This is the most common bind address to change.
nomad_ports_http: 4646
# The address to bind the internal RPC interfaces to.
# Should be exposed only to other cluster members if possible.
nomad_ports_rpc: 4647
# The address used to bind the gossip layer to.
# Both a TCP and UDP listener will be exposed on this address.
# Should be exposed only to other cluster members if possible.
nomad_ports_serf: 4648
# The address to advertise for the HTTP interface. 
# This should be reachable by all the nodes from which end users are going to use the Nomad CLI tools.
nomad_advertise_ports_http: "{{ nomad_ports_http }}"
# The address advertised to Nomad client nodes.
# This allows advertising a different RPC address than is used by Nomad Servers such that the clients can connect to the Nomad servers if they are behind a NAT.
nomad_advertise_ports_rpc: "{{ nomad_ports_rpc }}"
# The address advertised for the gossip layer. This address must be reachable from all server nodes.
# It is not required that clients can reach this address.
# Nomad servers will communicate to each other over RPC using the advertised Serf IP and advertised RPC Port.
nomad_advertise_ports_serf: "{{ nomad_ports_serf }}"


## Logs, debugs ##
# Specifies if the debugging HTTP endpoints should be enabled. 
# These endpoints can be used with profiling tools to dump diagnostic information about Nomad's internals.
nomad_debug: false
# Specifies the verbosity of logs the Nomad agent will output. 
# Valid log levels include WARN, INFO, or DEBUG in increasing order of verbosity.
nomad_log_level: "INFO"
# Output logs in a JSON format.
nomad_log_json: false
# Specifies the path for logging. 
# If the path does not includes a filename, the filename defaults to "nomad-{timestamp}.log". 
# This setting can be combined with log_rotate_bytes and log_rotate_duration for a fine-grained log rotation control.
nomad_log_file: "nomad-{timestamp}.log"
# Specifies the number of bytes that should be written to a log before it needs to be rotated.
# Unless specified, there is no limit to the number of bytes that can be written to a log file.
nomad_log_rotate_bytes: 0
# Specifies the maximum duration a log should be written to before it needs to be rotated.
# Must be a duration value such as 30s.
nomad_log_rotate_duration: "24h"
# Specifies the maximum number of older log file archives to keep.
# If 0 no files are ever deleted.
nomad_log_rotate_max_files: 0
# Specifies if the agent should log to syslog. This option only works on Unix based systems.
nomad_enable_syslog: false


## Updates ##
# Specifies if Nomad should provide an anonymous signature for de-duplication with the update check.
nomad_disable_anonymous_signature: false
# Specifies if Nomad should not check for updates and security bulletins.
nomad_disable_update_check: false


## Headers ##
# Specifies user-defined headers to add to the HTTP API responses.
nomad_http_api_response_headers: ''


## Life cycle ##
# Specifies if the agent should gracefully leave when receiving the terminate signal. 
# By default, the agent will exit forcefully on any signal.
# This value should only be set to true on server agents if it is expected that a terminated server instance will never join the cluster again.
nomad_leave_on_terminate: false
# Specifies if the agent should gracefully leave when receiving the interrupt signal. 
# By default, the agent will exit forcefully on any signal.
# This value should only be set to true on server agents if it is expected that a terminated server instance will never join the cluster again.
nomad_leave_on_interrupt: false


## Limits ##
# Configures the limit for how long the HTTPS server in both client and server agents will wait for a client to complete a TLS handshake.
# This should be kept conservative as it limits how many connections an unauthenticated attacker can open if tls.http = true is being used (strongly recommended in production).
# Default value is 5s. 0 disables HTTP handshake timeouts.
nomad_https_handshake_timeout: "5s"
# Configures a limit of how many concurrent TCP connections a single client IP address is allowed to open to the agent's HTTP server.
# This affects the HTTP servers in both client and server agents.
# Default value is 100. 0 disables HTTP connection limits.
nomad_http_max_conns_per_client: 100
# Configures the limit for how long servers will wait after a client TCP connection is established before they complete the connection handshake.
# When TLS is used, the same timeout applies to the TLS handshake separately from the initial protocol negotiation.
# All Nomad clients should perform this immediately on establishing a new connection.
# This should be kept conservative as it limits how many connections an unauthenticated attacker can open if TLS is being using to authenticate clients (strongly recommended in production).
# When tls.rpc is true on servers, this limits how long the connection and associated goroutines will be held open before the client successfully authenticates.
# Default value is 5s. 0 disables RPC handshake timeouts.
nomad_rpc_handshake_timeout: "5s" 
# Configures a limit of how many concurrent TCP connections a single source IP address is allowed to open to a single server.
# Client agents do not accept RPC TCP connections directly and therefore are not affected.
# It affects both clients connections and other server connections.
# Nomad clients multiplex many RPC calls over a single TCP connection, except for streaming endpoints such as log streaming which require their own connection when routed through servers.
# A server needs at least 2 TCP connections (1 Raft, 1 RPC) per peer server locally and in any federated region. Servers also need a TCP connection per routed streaming endpoint concurrently in use. Only operators use streaming endpoints; as of 0.10.3 Nomad client code does not.
# A reasonably low limit significantly reduces the ability of an unauthenticated attacker to consume unbounded resources by holding open many connections.
# You may need to increase this if WAN federated servers connect via proxies or NAT gateways or similar causing many legitimate connections from a single source IP.
# Default value is 100 which is designed to support the majority of users.
# 0 disables RPC connection limits. 26 is the minimum as 20 connections are always reserved for non-streaming connections (Raft and RPC) to ensure streaming RPCs do not prevent normal server operation.
# This minimum may be lowered in the future when streaming RPCs no longer require their own TCP connection.
nomad_rpc_max_conns_per_client: 100 


## ACLs ##
# Specifies if ACL enforcement is enabled.
# All other client configuration options depend on this value.
nomad_acl_enabled: false
# Specifies the maximum time-to-live (TTL) for cached ACL tokens.
# This does not affect servers, since they do not cache tokens.
# Setting this value lower reduces how stale a token can be, but increases the request load against servers.
# If a client cannot reach a server, for example because of an outage, the TTL will be ignored and the cached value used.
nomad_acl_token_ttl: "30s"
# Specifies the maximum time-to-live (TTL) for cached ACL policies.
# This does not affect servers, since they do not cache policies.
# Setting this value lower reduces how stale a policy can be, but increases the request load against servers.
# If a client cannot reach a server, for example because of an outage, the TTL will be ignored and the cached value used.
nomad_acl_policy_ttl: "30s"
# Specifies the Secret ID of the ACL token to use for replicating policies and tokens.
# This is used by servers in non-authoritative region to mirror the policies and tokens into the local region.
nomad_acl_replication_token: ""


## Vault ##
# Specifies if the Vault integration should be activated.
nomad_vault_enabled: false
# Specifies the address to the Vault server.
# This must include the protocol, host/ip, and port given in the format protocol://host:port.
# If your Vault installation is behind a load balancer, this should be the address of the load balancer.
nomad_vault_address: "https://vault.service.consul:8200"
# Specifies if users submitting jobs to the Nomad server should be required to provide their own Vault token, proving they have access to the policies listed in the job.
# This option should be disabled in an untrusted environment.
nomad_vault_allow_unauthenticated: true
# Specifies the role to create tokens from.
# The token given to Nomad does not have to be created from this role but must have "update" capability on "auth/token/create/<create_from_role>" path in Vault. 
# If this value is unset and the token is created from a role, the value is defaulted to the role the token is from. This is largely for backwards compatibility.
# It is recommended to set the create_from_role field if Nomad is deriving child tokens from a role.
nomad_vault_create_from_role: ""
# Specifies the TTL of created tokens when using a root token.
# This is specified using a label suffix like "30s" or "1h".
nomad_vault_task_token_ttl: ""
# Specifies an optional path to the CA certificate used for Vault communication.
# If unspecified, this will fallback to the default system CA bundle, which varies by OS and version.
nomad_vault_ca_file: ""
# Specifies an optional path to a folder containing CA certificates to be used for Vault communication. 
# If unspecified, this will fallback to the default system CA bundle, which varies by OS and version.
nomad_vault_ca_path: ""
# Specifies the path to the certificate used for Vault communication. 
# This must be set if tls_require_and_verify_client_cert is enabled in Vault.
nomad_vault_cert_file: ""
# Specifies the path to the private key used for Vault communication.
# If this is set then you need to also set cert_file.
# This must be set if tls_require_and_verify_client_cert is enabled in Vault.
nomad_vault_key_file: ""
# Specifies the Vault namespace used by the Vault integration. 
# If non-empty, this namespace will be used on all Vault API calls.
nomad_vault_namespace: ""
# Specifies an optional string used to set the SNI host when connecting to Vault via TLS.
nomad_vault_tls_server_name: ""
# Specifies if SSL peer validation should be enforced.
nomad_vault_tls_skip_verify: false
# Specifies the parent Vault token to use to derive child tokens for jobs requesting tokens.
nomad_vault_token: ""


## Tls ##
# Specifies if the TLS should be activated.
nomad_tls_enabled: false
# Specifies if TLS should be enabled on the HTTP endpoints on the Nomad agent, including the API.
nomad_tls_http: false
# Specifies if TLS should be enabled on the RPC endpoints and Raft traffic between the Nomad servers. 
# Enabling this on a Nomad client makes the client use TLS for making RPC requests to the Nomad servers.
nomad_tls_rpc: false
# This option should be used only when the cluster is being upgraded to TLS, and removed after the migration is complete. 
# This allows the agent to accept both TLS and plaintext traffic.
nomad_tls_rpc_upgrade_mode: false
# Specifies the path to the CA certificate to use for Nomad's TLS communication.
nomad_tls_ca_file: ""
# Specifies the path to the certificate file used for Nomad's TLS communication.
nomad_tls_cert_file: ""
# Specifies the path to the key file to use for Nomad's TLS communication.
nomad_tls_key_file: ""
# Specifies the TLS cipher suites that will be used by the agent as a comma-separated string. 
# Known insecure ciphers are disabled (3DES and RC4).
nomad_tls_cipher_suites: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
# Specifies the minimum supported version of TLS. Accepted values are "tls10", "tls11", "tls12".
nomad_tls_min_version: "tls12"
# Specifies whether TLS connections should prefer the server's ciphersuites over the client's.
tls_prefer_server_cipher_suites: false
# Specifies agents should require client certificates for all incoming HTTPS requests. 
# The client certificates must be signed by the same CA as Nomad.
nomad_tls_verify_https_client: false
# Specifies if outgoing TLS connections should verify the server's hostname.
nomad_tls_verify_server_hostname: false


## Consul ##
# Specifies if the Consul integration should be activated.
nomad_consul_enabled: false
# Specifies the address to the local Consul agent, given in the format host:port. 
# Supports Unix sockets with the format: unix:///tmp/consul/consul.sock. 
# Will default to the CONSUL_HTTP_ADDR environment variable if set.
nomad_consul_address: "127.0.0.1:8500"
# Specifies if users submitting jobs to the Nomad server should be required to provide their own Consul token, proving they have access to the service identity policies required by the Consul Connect enabled services listed in the job.
# This option should be disabled in an untrusted environment.
nomad_consul_allow_unauthenticated: true
# Specifies the HTTP Basic Authentication information to use for access to the Consul Agent, given in the format username:password.
nomad_consul_auth: ""
# Specifies if Nomad should advertise its services in Consul.
# The services are named according to server_service_name and client_service_name.
# Nomad servers and clients advertise their respective services, each tagged appropriately with either http or rpc tag.
# Nomad servers also advertise a serf tagged service.
nomad_consul_auto_advertise: true
# Specifies an optional path to the CA certificate used for Consul communication.
# This defaults to the system bundle if unspecified.
# Will default to the CONSUL_CACERT environment variable if set.
nomad_consul_ca_file: ""
# Specifies the path to the certificate used for Consul communication.
# If this is set then you need to also set key_file.
nomad_consul_cert_file: ""
# Specifies the path to the private key used for Consul communication.
# If this is set then you need to also set cert_file.
nomad_consul_key_file: ""
# Specifies if the transport scheme should use HTTPS to communicate with the Consul agent. 
# Will default to the CONSUL_HTTP_SSL environment variable if set.
nomad_consul_ssl: false
# Specifies if SSL peer verification should be used when communicating to the Consul API client over HTTPS.
# Will default to the CONSUL_HTTP_SSL_VERIFY environment variable if set.
nomad_consul_verify_ssl: true
# Specifies whether the Nomad client should share its Consul SSL configuration with Connect Native applications.
# Includes values of ca_file, cert_file, key_file, ssl, and verify_ssl.
# Does not include the values for the ACL token or auth. This option should be disabled in environments where Consul ACLs are not enabled.
nomad_consul_share_ssl: true
# Specifies if the Nomad clients should automatically discover servers in the same region by searching for the Consul service name defined in the server_service_name option.
# The search occurs if the client is not registered with any servers or it is unable to heartbeat to the leader of the region, in which case it may be partitioned and searches for other servers.
nomad_consul_client_auto_join: true
# Specifies if the Nomad servers should automatically discover and join other Nomad servers by searching for the Consul service name defined in the server_service_name option.
# This search only happens if the server does not have a leader.
nomad_consul_server_auto_join: true
# Specifies the name of the service in Consul for the Nomad clients.
nomad_consul_client_service_name: "nomad-client"
# Specifies the name of the service in Consul for the Nomad servers.
nomad_consul_server_service_name: "nomad-server"
# Specifies if Consul health checks should bind to the advertise address.
# By default, this is the bind address.
nomad_consul_checks_use_advertise: false
# Specifies the HTTP health check name in Consul for the Nomad clients.
nomad_consul_client_http_check_name: "Nomad Client HTTP Check"
# Specifies the HTTP health check name in Consul for the Nomad servers.
nomad_consul_server_http_check_name: "Nomad Server HTTP Check"
# Specifies the Serf health check name in Consul for the Nomad servers.
nomad_consul_server_serf_check_name: "Nomad Server Serf Check"
# Specifies the RPC health check name in Consul for the Nomad servers.
nomad_consul_server_rpc_check_name: "Nomad Server RPC Check"
# Specifies the token used to provide a per-request ACL token.
# This option overrides the Consul Agent's default token.
# If the token is not set here or on the Consul agent, it will default to Consul's anonymous policy, which may or may not allow writes.
nomad_consul_token: ""
# Specifies optional Consul tags to be registered with the Nomad server and agent services.
nomad_consul_tags: {}

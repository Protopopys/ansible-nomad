---
# Создаем папки на удаленной машине
- name: NOMAD | Creating folders
  file:
    path: "{{ distribution_path }}"
    state: directory
    owner: root
    group: root
    mode: u+rwx

# Создаем папки на удаленной машине
- name: NOMAD | Creating folders
  file:
    path: "{{ nomad_bin_dir }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: u+rwx

# Проверяем наличие бинарного файла на удаленной машине
- name: NOMAD | Check that the nomad binary exists on the destination host
  stat:
    path: "{{ nomad_bin_dir }}/nomad"
    checksum_algorithm: "{{ nomad[nomad_version].checksum_algorithm }}"
  register: remote_binary

# Проверяем наличие архива на удаленной машине
- name: NOMAD | Check that the nomad archive exists on the destination host
  stat:
    path: "{{ distribution_path }}/{{ nomad[nomad_version].source_url | basename }}"
    checksum_algorithm: "{{ nomad[nomad_version].checksum_algorithm }}"
  register: remote_distr
  when: remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum

# Блок заданий
# исполняется если:
## Использвание downloader сервера включено - use_downloader=true и (Если архива нет на удаленном сервере или Контрольная сумма архива не совпадает с указанной в переменной - nomad[nomad_version].checksum
- name: NOMAD |(when use_downloader == TRUE)
  block:
    # Создаем папку на downloader сервере (в данную папку будет осуществляться скачивание архива из сети интернет)
    - name: NOMAD | Creating default folder for components
      file:
        path: "{{ downloader_source_folder }}"
        state: directory
        mode: u+rwx
      run_once: true
      delegate_to: "localhost"

    # Проверяем наличие архива на downloader сервере
    - name: NOMAD | Check that the nomad archive exists on the localhost
      stat:
        path: "{{ downloader_source_folder }}/{{ nomad[nomad_version].source_url | basename }}"
        checksum_algorithm: "{{ nomad[nomad_version].checksum_algorithm }}"
      register: downloader_distr
      run_once: true
      delegate_to: localhost

    # Выкачиваем архив напрямую из сети интернет
    # Если:
    ## Контрольная сумма архива на downloader не совпадает с указанной в переменной - nomad[nomad_version].checksum)
    - name: NOMAD | Download nomad archive to localhost
      get_url:
        url: "{{ nomad[nomad_version].source_url }}"
        dest: "{{ downloader_source_folder }}"
        checksum: "{{ nomad[nomad_version].checksum_algorithm }}:{{ nomad[nomad_version].checksum }}"
      run_once: true
      delegate_to: localhost
      when: downloader_distr.stat.checksum|default() != nomad[nomad_version].checksum

    # Выполняем синхронизацию архива с удаленной машиной
    # Если:
    ## downloader сервером является localhost (машина на которой осуществляется запуск playbook)
    ## Контрольная сумма архива на удаленном сервере не совпадает с указанной в переменной - nomad[nomad_version].checksum)
    - name: NOMAD | Copy from localhost to remote host
      copy:
        src: "{{ downloader_source_folder }}/{{ nomad[nomad_version].source_url | basename }}"
        dest: "{{ distribution_path }}"
        owner: root
        group: root
        mode: u+rwx
      notify: NOMAD | Ensure service is stopped
  when:
    - use_downloader
    - remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum
    - remote_distr.stat.checksum|default() != nomad[nomad_version].checksum

# Выкачиваем архив напрямую из сети интернет
# Если:
## Использвание downloader сервера отключено: use_downloader=false и (Если архива нет на удаленном сервере или Контрольная сумма архива не совпадает с указанной в переменной - nomad[nomad_version].checksum)
- name: NOMAD | Download nomad archive to host
  get_url:
    url: "{{ nomad[nomad_version].source_url }}"
    dest: "{{ distribution_path }}"
    checksum: "{{ nomad[nomad_version].checksum_algorithm }}:{{ nomad[nomad_version].checksum }}"
    owner: root
    group: root
  notify: NOMAD | Ensure service is stopped
  when:
    - not use_downloader
    - remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum
    - remote_distr.stat.checksum|default() != nomad[nomad_version].checksum

# Запускаем принудительное исполнение handlers
- name: NOMAD | Flush handlers
  meta: flush_handlers

# Ищем файлы в директории "{{ nomad_bin_dir }}"
# Если:
## Контрольная сумма бинарного файла на удаленном хосте не совпадает с указанной в переменной - nomad[nomad_version].binary_checksum)
- name: NOMAD | Find files in "{{ nomad_bin_dir }}"
  find:
    paths: "{{ nomad_bin_dir }}"
  register: files_to_delete
  when: remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum

# Очищаем директорию "{{ nomad_bin_dir }}"
# Если:
## Контрольная сумма бинарного файла на удаленном хосте не совпадает с указанной в переменной - nomad[nomad_version].binary_checksum)
- name: NOMAD | Cleanup directory
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.files }}"
  when: remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum

# Распаковываем архив на удаленном сервере в директорию "{{ nomad_bin_dir }}"
# Если:
## Контрольная сумма бинарного файла на удаленном хосте не совпадает с указанной в переменной - nomad[nomad_version].binary_checksum)
- name: NOMAD | Extract nomad archive into {{ distribution_path }}
  unarchive:
    src: "{{ distribution_path }}/{{ nomad[nomad_version].source_url | basename }}"
    dest: "{{ nomad_bin_dir }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    remote_src: true
  when: remote_binary.stat.checksum|default() != nomad[nomad_version].binary_checksum
